<?php
/**
 * Plugin Name:     WP AI Code Companion
 * Plugin URI:      PLUGIN SITE HERE
 * Description:     An AI Code Companion that you run ENTIRELY AT YOUR OWN RISK
 * Author:          Ross Wintle
 * Author URI:      https://rosswintle.uk
 * Text Domain:     wpai
 * Domain Path:     /languages
 * Version:         0.1.0
 *
 * @package         Wpai
 */

/*
 * This is a stupid idea. Don't use this plugin.
 *
 * You run this code ENTIRELY AT YOUR OWN RISK!!!
 *
 * I take no responsibility for you website being broken beyond repair; your
 * laptop or server being wiped of all files; or ANYTHING that might happen as
 * a result of you using this code.
 *
 * This code tells an AI of dubious trustworthiness to generate more code and
 * then runs the "more code" on your computer.
 *
 * This is REALLY dangerous. You should not do this.
 *
 * And if you DO do it, do it on a temporary VPS, or a walled-off temporary site,
 * or an instawp.com site or something. And you do that - and I can't say this
 * strongly enough - entirely at your own risk.
 */
class WPAI {

	/**
	 * The filename to use to save functions to.
	 */
	const FUNCS_FILENAME = "wpai_funcs.php";

	const FUNCS_NAMESPACE = "WPAIFuncs";

	const DEBUG = false;

	/**
	 * Initialize the plugin.
	 */
	public function __construct() {
		self::debug_log("Initializing plugin...");
		if ( ! function_exists( self::FUNCS_NAMESPACE . '::init' ) ) {
			self::load_funcs_file();
		}
	}

	/**
	 * Print debug messages.
	 */
	protected static function debug_log( $message ) {
		if ( self::DEBUG ) {
			echo $message;
		}
	}

	/**
	 * Create the functions file in mu-plugins.
	 */
	protected static function create_funcs_file() {
		self::debug_log("Creating funcs file...");

		$funcs_file = self::get_funcs_filename();
		$funcs_file_contents = "<?php
namespace " . self::FUNCS_NAMESPACE . ";
if ( ! defined( 'ABSPATH' ) ) {
	exit;
}

// This file is automatically generated by the WP AI Code Companion plugin.

// NEW FUNCTIONS GO HERE
";
		file_put_contents($funcs_file, $funcs_file_contents);
	}

	/**
	 * Load the functions file. Create it if it doesn't exist.
	 */
	protected static function load_funcs_file() {
		self::debug_log("Loading funcs file...");

		$funcs_file = self::get_funcs_filename();
		if ( ! file_exists( $funcs_file ) ) {
			self::create_funcs_file();
		}
		require_once $funcs_file;
	}

	public static function __callStatic( $name, $arguments ) {
		self::debug_log("Calling function $name");
		// Check if the function exists as a method in the functions class.
		if ( self::function_exists( $name ) ) {
			self::debug_log("Calling existing function $name");
			return self::call_function( $name, $arguments );
		}

		self::debug_log("Calling new function $name");

		$function_to_ask_for = str_replace('_', ' ', $name);

		$params_array = [];
		foreach ($arguments as $arg_name => $arg_value) {
			if (is_numeric($arg_name)) {
				$arg_name = 'param' . $arg_name;
			}
			$params_array[] = gettype($arg_value) . ' $' . $arg_name;
		}

		$params_string = implode(', ', $params_array);

		$api_query =
"// PHP
/*
Create a single, self-contained, complete PHP function that will $function_to_ask_for

Create only one function, and do not use any other functions. Assume no other functions exist and inline all code into one function.

The function runs inside a WordPress plugin.

The function exists in the namespace " . self::FUNCS_NAMESPACE . "

Do not include any add_action or add_filter calls. Any registration functions are inside the function itself.

After the function's closing bracket add a comment that says \"// END FUNCTION\"
*/
function $name ( $params_string ) {
";

		// echo $api_query . "\n\n//----------------------\n\n";

		$function = self::send_query($api_query, ['stop' => '// END FUNCTION']);

		// var_dump($function);

		$full_function = $api_query . $function;

		self::write_function_to_file($full_function);

		// Create a temporary, global function to run the code.
		$temp_function = str_replace( "function $name (", "function wpai_temp_$name (", $full_function );
		eval($temp_function);
		$func_name = 'wpai_temp_' . $name;
		return $func_name(...$arguments);
	}

	// Get the functions filename.
	protected static function get_funcs_filename() {
		return WPMU_PLUGIN_DIR . '/' . self::FUNCS_FILENAME;
	}

	// Check if a function exists in the functions class.
	protected static function function_exists( $name ) {
		return function_exists( self::FUNCS_NAMESPACE . '\\' . $name );
	}

	// Call a function in the functions class.
	protected static function call_function( $name, $arguments ) {
		return call_user_func_array( self::FUNCS_NAMESPACE . '\\' . $name, $arguments );
	}

	// Write a function to the functions file.
	protected static function write_function_to_file( $function ) {
		$function = self::strip_comments($function);

		$funcs_file = self::get_funcs_filename();

		$funcs_file_contents = file_get_contents($funcs_file);
		$funcs_file_contents = str_replace('// NEW FUNCTIONS GO HERE', $function . "\n\n// NEW FUNCTIONS GO HERE", $funcs_file_contents);
		file_put_contents($funcs_file, $funcs_file_contents);
	}

	// Strip comments from a string.
	public static function strip_comments($string) {
		return preg_replace('/\/\*.*\*\//ms', '', $string);
	}

	public static function query($text) {
		$api_query = "
// PHP
/*
A WordPress WP_Posts query that assignes the results to \$posts and fetches
$text

\$posts=get_posts([";

		// echo $api_query . "\n\n----------------------\n\n";

		echo "\$posts=get_posts([\n" . self::send_query($api_query, ['stop' => ']);']) . ']);';
	}

	// Send a query to OpenAI
	protected static function send_query($text, $options=[]) {
		$defaults = [
			// 'model' => 'code-davinci-002',
			'model' => 'code-cushman-001',
			'prompt' => $text,
			'max_tokens' => 1500,
			'temperature' => 0,
			'stream' => false,
		];

		$options = array_merge( $defaults, $options );

		$response = wp_remote_post('https://api.openai.com/v1/completions', [
			'headers' => [
				'Authorization' => 'Bearer ' . WPAI_API_KEY,
				'Content-Type' => 'application/json',
			],
			'timeout' => 20,
			'body' => json_encode($options),
		]);

		// echo "Response is:";
		// var_dump($response);

		if (is_wp_error( $response ) ) {
			echo "Error: " . $response->get_error_message();
			return false;
		}

		if (200 !== $response['response']['code']) {
			echo "Error: " . $response['response']['message'];
			return false;
		}
		$response_json = json_decode($response['body']);
		return $response_json->choices[0]->text;
	}


}

// Initialize the plugin.
new WPAI();
